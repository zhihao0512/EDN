# Copyright 2024 The HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import inspect
import os
from typing import Any, Callable, Dict, List, Optional, Tuple, Union

import numpy as np
import PIL
import torch
import torch.nn as nn
from diffusers import EulerDiscreteScheduler
from diffusers.image_processor import PipelineImageInput, VaeImageProcessor
from diffusers.models import (
    AutoencoderKL,
    ImageProjection,
    T2IAdapter,
    UNet2DConditionModel,
)
from diffusers.pipelines.stable_diffusion_xl.pipeline_output import (
    StableDiffusionXLPipelineOutput,
)
from diffusers.pipelines.stable_diffusion_xl.pipeline_stable_diffusion_xl import (
    StableDiffusionXLPipeline,
    rescale_noise_cfg,
    retrieve_timesteps,
)
from diffusers.schedulers import KarrasDiffusionSchedulers
from diffusers.utils import deprecate, logging
from diffusers.utils.torch_utils import randn_tensor
from einops import rearrange
from transformers import (
    CLIPImageProcessor,
    CLIPTextModel,
    CLIPTextModelWithProjection,
    CLIPTokenizer,
    CLIPVisionModelWithProjection,
)

from ..loaders import CustomAdapterMixin
from ..models.attention_processor import (
    DecoupledMVRowSelfAttnProcessor2_0,
    set_unet_2d_condition_attn_processor,
)
from euler_discrete_inverse import EulerDiscreteInverseScheduler
logger = logging.get_logger(__name__)  # pylint: disable=invalid-name


def retrieve_latents(
    encoder_output: torch.Tensor,
    generator: Optional[torch.Generator] = None,
    sample_mode: str = "sample",
):
    if hasattr(encoder_output, "latent_dist") and sample_mode == "sample":
        return encoder_output.latent_dist.sample(generator)
    elif hasattr(encoder_output, "latent_dist") and sample_mode == "argmax":
        return encoder_output.latent_dist.mode()
    elif hasattr(encoder_output, "latents"):
        return encoder_output.latents
    else:
        raise AttributeError("Could not access latents of provided encoder_output")


class MVAdapterI2MVSDXLPipeline(StableDiffusionXLPipeline, CustomAdapterMixin):
    def __init__(
        self,
        vae: AutoencoderKL,
        text_encoder: CLIPTextModel,
        text_encoder_2: CLIPTextModelWithProjection,
        tokenizer: CLIPTokenizer,
        tokenizer_2: CLIPTokenizer,
        unet: UNet2DConditionModel,
        scheduler: KarrasDiffusionSchedulers,
        image_encoder: CLIPVisionModelWithProjection = None,
        feature_extractor: CLIPImageProcessor = None,
        force_zeros_for_empty_prompt: bool = True,
        add_watermarker: Optional[bool] = None,
    ):
        super().__init__(
            vae=vae,
            text_encoder=text_encoder,
            text_encoder_2=text_encoder_2,
            tokenizer=tokenizer,
            tokenizer_2=tokenizer_2,
            unet=unet,
            scheduler=scheduler,
            image_encoder=image_encoder,
            feature_extractor=feature_extractor,
            force_zeros_for_empty_prompt=force_zeros_for_empty_prompt,
            add_watermarker=add_watermarker,
        )

        self.control_image_processor = VaeImageProcessor(
            vae_scale_factor=self.vae_scale_factor,
            do_convert_rgb=True,
            do_normalize=False,
        )
        self.inv_scheduler = EulerDiscreteInverseScheduler(
            beta_end=0.012,
            beta_schedule="scaled_linear",
            beta_start=0.00085,
            # clip_sample=False,
            final_sigmas_type="zero",
            interpolation_type="linear",
            num_train_timesteps=1000,
            prediction_type="epsilon",
            rescale_betas_zero_snr=False,
            # set_alpha_to_one=False,
            sigma_max=None,
            sigma_min=None,
            # skip_prk_steps=True,
            steps_offset=1,
            timestep_spacing="leading",
            timestep_type=" discrete",
            trained_betas=[
    0.0008500218391418457,
    0.0008582472801208496,
    0.0008664727210998535,
    0.0008749961853027344,
    0.0008832216262817383,
    0.0008918046951293945,
    0.0009001493453979492,
    0.0009087920188903809,
    0.0009173750877380371,
    0.000925898551940918,
    0.0009347200393676758,
    0.0009434223175048828,
    0.0009522438049316406,
    0.0009611248970031738,
    0.0009697675704956055,
    0.000979006290435791,
    0.000987708568572998,
    0.0009968876838684082,
    0.0010061264038085938,
    0.0010150671005249023,
    0.0010243058204650879,
    0.0010336637496948242,
    0.0010426640510559082,
    0.0010523200035095215,
    0.0010616183280944824,
    0.0010709166526794434,
    0.001080632209777832,
    0.0010899901390075684,
    0.0010996460914611816,
    0.001109302043914795,
    0.0011188983917236328,
    0.0011286735534667969,
    0.0011385083198547363,
    0.0011484026908874512,
    0.001158297061920166,
    0.0011683106422424316,
    0.001178145408630371,
    0.0011883378028869629,
    0.0011985301971435547,
    0.0012086033821105957,
    0.0012186765670776367,
    0.0012289881706237793,
    0.0012392997741699219,
    0.001249849796295166,
    0.0012600421905517578,
    0.0012707114219665527,
    0.0012810826301574707,
    0.0012917518615722656,
    0.0013022422790527344,
    0.0013130903244018555,
    0.001323699951171875,
    0.00133436918258667,
    0.0013453364372253418,
    0.0013563036918640137,
    0.0013669729232788086,
    0.001378178596496582,
    0.0013890266418457031,
    0.0014002323150634766,
    0.0014113783836364746,
    0.0014225244522094727,
    0.0014339089393615723,
    0.001444995403289795,
    0.0014562606811523438,
    0.001467883586883545,
    0.0014792084693908691,
    0.001490771770477295,
    0.0015022754669189453,
    0.0015138983726501465,
    0.001525580883026123,
    0.0015372037887573242,
    0.0015489459037780762,
    0.0015606880187988281,
    0.0015726089477539062,
    0.0015844106674194336,
    0.0015966296195983887,
    0.0016083121299743652,
    0.0016205310821533203,
    0.0016325712203979492,
    0.0016446113586425781,
    0.0016570091247558594,
    0.0016692876815795898,
    0.0016813874244689941,
    0.0016939043998718262,
    0.0017061829566955566,
    0.0017186999320983887,
    0.0017312169075012207,
    0.0017435550689697266,
    0.001756429672241211,
    0.0017690658569335938,
    0.0017815232276916504,
    0.0017943978309631348,
    0.0018072128295898438,
    0.0018199682235717773,
    0.0018328428268432617,
    0.0018459558486938477,
    0.0018587112426757812,
    0.0018717646598815918,
    0.001885056495666504,
    0.0018978714942932129,
    0.0019112825393676758,
    0.0019244551658630371,
    0.0019376277923583984,
    0.0019510984420776367,
    0.001964390277862549,
    0.001977682113647461,
    0.0019913315773010254,
    0.0020046234130859375,
    0.002018272876739502,
    0.002031862735748291,
    0.00204545259475708,
    0.0020591020584106445,
    0.0020728707313537598,
    0.0020866990089416504,
    0.002100229263305664,
    0.0021143555641174316,
    0.0021281838417053223,
    0.002142012119293213,
    0.0021562576293945312,
    0.002169966697692871,
    0.002184271812438965,
    0.002198338508605957,
    0.0022124648094177246,
    0.002226710319519043,
    0.0022409558296203613,
    0.0022553205490112305,
    0.002269446849822998,
    0.002283751964569092,
    0.0022984743118286133,
    0.002312600612640381,
    0.002327263355255127,
    0.0023416876792907715,
    0.002356410026550293,
    0.002370893955230713,
    0.002385437488555908,
    0.0024001598358154297,
    0.0024150609970092773,
    0.0024295449256896973,
    0.002444624900817871,
    0.0024593472480773926,
    0.0024742484092712402,
    0.0024889111518859863,
    0.0025042295455932617,
    0.002518892288208008,
    0.002534210681915283,
    0.002549111843109131,
    0.0025641322135925293,
    0.002579212188720703,
    0.0025945305824279785,
    0.0026097893714904785,
    0.002624988555908203,
    0.0026398301124572754,
    0.0026556849479675293,
    0.002670764923095703,
    0.002686142921447754,
    0.002701401710510254,
    0.002716958522796631,
    0.002732515335083008,
    0.0027478933334350586,
    0.00276339054107666,
    0.002778947353363037,
    0.002794325351715088,
    0.0028104186058044434,
    0.0028257369995117188,
    0.0028415322303771973,
    0.002857208251953125,
    0.0028727054595947266,
    0.0028885602951049805,
    0.0029042959213256836,
    0.002920210361480713,
    0.002935945987701416,
    0.0029518604278564453,
    0.0029678940773010254,
    0.0029836297035217285,
    0.002999424934387207,
    0.0030155181884765625,
    0.003031611442565918,
    0.0030474066734313965,
    0.0030636191368103027,
    0.0030795931816101074,
    0.003095567226409912,
    0.0031116604804992676,
    0.0031279325485229492,
    0.00314408540725708,
    0.0031600594520568848,
    0.003176450729370117,
    0.003192424774169922,
    0.0032088160514831543,
    0.003224968910217285,
    0.0032411813735961914,
    0.0032578110694885254,
    0.0032737255096435547,
    0.003290116786956787,
    0.0033065080642700195,
    0.0033227205276489258,
    0.003339111804962158,
    0.0033554434776306152,
    0.0033720731735229492,
    0.00338822603225708,
    0.003404676914215088,
    0.003421485424041748,
    0.0034373998641967773,
    0.003454148769378662,
    0.0034706592559814453,
    0.003486812114715576,
    0.0035036802291870117,
    0.0035200119018554688,
    0.003536522388458252,
    0.003553152084350586,
    0.0035695433616638184,
    0.003586292266845703,
    0.00360262393951416,
    0.0036193132400512695,
    0.0036358237266540527,
    0.003652513027191162,
    0.0036689043045043945,
    0.003685891628265381,
    0.0037020444869995117,
    0.003718852996826172,
    0.003735482692718506,
    0.00375211238861084,
    0.003768742084503174,
    0.0037853121757507324,
    0.003802061080932617,
    0.003818511962890625,
    0.003835022449493408,
    0.0038521289825439453,
    0.003868579864501953,
    0.0038851499557495117,
    0.003901958465576172,
    0.0039182305335998535,
    0.0039351582527160645,
    0.003951907157897949,
    0.003968358039855957,
    0.003984987735748291,
    0.004001915454864502,
    0.004018306732177734,
    0.004035055637359619,
    0.004051506519317627,
    0.004068493843078613,
    0.004084885120391846,
    0.0041016340255737305,
    0.004118144512176514,
    0.004134833812713623,
    0.004151523113250732,
    0.00416797399520874,
    0.004184901714324951,
    0.004201114177703857,
    0.004218101501464844,
    0.004234433174133301,
    0.004250824451446533,
    0.004267513751983643,
    0.004284381866455078,
    0.004300832748413086,
    0.004317104816436768,
    0.004333794116973877,
    0.004350185394287109,
    0.0043669939041137695,
    0.004383742809295654,
    0.004399538040161133,
    0.004416525363922119,
    0.00443267822265625,
    0.0044495463371276855,
    0.004465699195861816,
    0.0044822096824646,
    0.004498720169067383,
    0.004515111446380615,
    0.004531443119049072,
    0.00454789400100708,
    0.004564106464385986,
    0.00458073616027832,
    0.004596889019012451,
    0.00461345911026001,
    0.004629552364349365,
    0.004645943641662598,
    0.004662156105041504,
    0.0046784281730651855,
    0.004694879055023193,
    0.004710793495178223,
    0.0047272443771362305,
    0.004743337631225586,
    0.004759430885314941,
    0.0047757625579833984,
    0.00479203462600708,
    0.004807949066162109,
    0.004823923110961914,
    0.004840373992919922,
    0.004855930805206299,
    0.004872500896453857,
    0.004888415336608887,
    0.00490415096282959,
    0.0049201250076293945,
    0.004936635494232178,
    0.004952073097229004,
    0.004968225955963135,
    0.004984140396118164,
    0.004999756813049316,
    0.005015909671783447,
    0.005031466484069824,
    0.0050473809242248535,
    0.005063414573669434,
    0.005078792572021484,
    0.005094766616821289,
    0.005110442638397217,
    0.005125999450683594,
    0.0051419734954833984,
    0.005157411098480225,
    0.005173146724700928,
    0.005188584327697754,
    0.005204141139984131,
    0.005219817161560059,
    0.0052353739738464355,
    0.005250751972198486,
    0.005266308784484863,
    0.005281627178192139,
    0.00529712438583374,
    0.005312561988830566,
    0.005328118801116943,
    0.005342960357666016,
    0.005358576774597168,
    0.005373716354370117,
    0.005389392375946045,
    0.005404055118560791,
    0.005419552326202393,
    0.005434632301330566,
    0.005449950695037842,
    0.005464911460876465,
    0.005479872226715088,
    0.0054950714111328125,
    0.0055100321769714355,
    0.005525112152099609,
    0.005540370941162109,
    0.0055550336837768555,
    0.005569815635681152,
    0.005585074424743652,
    0.005599677562713623,
    0.005614638328552246,
    0.005629241466522217,
    0.005644083023071289,
    0.005658924579620361,
    0.005673587322235107,
    0.005688309669494629,
    0.005702853202819824,
    0.005717456340789795,
    0.005732238292694092,
    0.005746901035308838,
    0.005761444568634033,
    0.005775570869445801,
    0.0057904720306396484,
    0.00580441951751709,
    0.005819261074066162,
    0.005833685398101807,
    0.005847752094268799,
    0.005862236022949219,
    0.005876779556274414,
    0.0058907270431518555,
    0.005904972553253174,
    0.005919098854064941,
    0.005933403968811035,
    0.005947589874267578,
    0.005961596965789795,
    0.005975544452667236,
    0.005990087985992432,
    0.0060037970542907715,
    0.006017804145812988,
    0.006031692028045654,
    0.006045997142791748,
    0.006059467792510986,
    0.006073415279388428,
    0.0060874223709106445,
    0.006100952625274658,
    0.006115138530731201,
    0.006128549575805664,
    0.006142616271972656,
    0.00615614652633667,
    0.006169676780700684,
    0.006183266639709473,
    0.006197214126586914,
    0.0062103271484375,
    0.006224215030670166,
    0.006237387657165527,
    0.006251215934753418,
    0.0062645673751831055,
    0.006277859210968018,
    0.006291508674621582,
    0.006304740905761719,
    0.006318032741546631,
    0.006331145763397217,
    0.006344795227050781,
    0.006357908248901367,
    0.00637131929397583,
    0.006383836269378662,
    0.0063974857330322266,
    0.006410539150238037,
    0.006423592567443848,
    0.006436645984649658,
    0.006449759006500244,
    0.0064626336097717285,
    0.0064757466316223145,
    0.0064885616302490234,
    0.006501555442810059,
    0.006514489650726318,
    0.006527304649353027,
    0.0065400004386901855,
    0.006552934646606445,
    0.0065659284591674805,
    0.006578564643859863,
    0.006591081619262695,
    0.006604015827178955,
    0.00661623477935791,
    0.006629467010498047,
    0.0066419243812561035,
    0.006654262542724609,
    0.006666779518127441,
    0.0066794753074646,
    0.006692171096801758,
    0.006704509258270264,
    0.006716728210449219,
    0.0067293643951416016,
    0.006741642951965332,
    0.006754100322723389,
    0.006766676902770996,
    0.00677865743637085,
    0.00679093599319458,
    0.0068032145500183105,
    0.006815731525421143,
    0.006827831268310547,
    0.006839931011199951,
    0.0068520307540893555,
    0.006864368915557861,
    0.006876170635223389,
    0.0068888068199157715,
    0.006900370121002197,
    0.006912589073181152,
    0.00692439079284668,
    0.0069367289543151855,
    0.006948232650756836,
    0.006960690021514893,
    0.0069724321365356445,
    0.006984353065490723,
    0.006996214389801025,
    0.007007777690887451,
    0.007019937038421631,
    0.007031738758087158,
    0.007043302059173584,
    0.007055163383483887,
    0.0070667266845703125,
    0.007078826427459717,
    0.007090449333190918,
    0.007101655006408691,
    0.007113516330718994,
    0.007125377655029297,
    0.007136821746826172,
    0.007148265838623047,
    0.0071604251861572266,
    0.007171511650085449,
    0.007182776927947998,
    0.007194578647613525,
    0.007205784320831299,
    0.007218062877655029,
    0.0072286128997802734,
    0.00724029541015625,
    0.0072515010833740234,
    0.00726318359375,
    0.007274448871612549,
    0.00728607177734375,
    0.007297098636627197,
    0.0073084235191345215,
    0.007319629192352295,
    0.007331192493438721,
    0.007342278957366943,
    0.007353425025939941,
    0.0073645710945129395,
    0.0073757171630859375,
    0.007386982440948486,
    0.007398247718811035,
    0.007409632205963135,
    0.00742030143737793,
    0.007431685924530029,
    0.007442593574523926,
    0.007453799247741699,
    0.007465004920959473,
    0.007475733757019043,
    0.00748676061630249,
    0.007497966289520264,
    0.007509052753448486,
    0.007519781589508057,
    0.0075310468673706055,
    0.007541775703430176,
    0.007552385330200195,
    0.007563769817352295,
    0.007574498653411865,
    0.0075855255126953125,
    0.007596433162689209,
    0.0076073408126831055,
    0.007618069648742676,
    0.007628798484802246,
    0.007639527320861816,
    0.0076506733894348145,
    0.007661342620849609,
    0.007671833038330078,
    0.007683396339416504,
    0.007693350315093994,
    0.007704555988311768,
    0.007715106010437012,
    0.007726132869720459,
    0.007736921310424805,
    0.007746696472167969,
    0.00775831937789917,
    0.007768750190734863,
    0.007779479026794434,
    0.007789909839630127,
    0.00780099630355835,
    0.007811069488525391,
    0.007822036743164062,
    0.007833003997802734,
    0.007843196392059326,
    0.007853686809539795,
    0.007864296436309814,
    0.00787508487701416,
    0.00788569450378418,
    0.007896125316619873,
    0.007906794548034668,
    0.007917165756225586,
    0.00792759656906128,
    0.007938683032989502,
    0.007948637008666992,
    0.007959544658660889,
    0.007969796657562256,
    0.007980644702911377,
    0.007990837097167969,
    0.008001506328582764,
    0.008012115955352783,
    0.008021891117095947,
    0.008033215999603271,
    0.008043408393859863,
    0.008053600788116455,
    0.0080643892288208,
    0.00807487964630127,
    0.008085012435913086,
    0.008095622062683105,
    0.008106350898742676,
    0.008116483688354492,
    0.008126974105834961,
    0.008137106895446777,
    0.008147656917572021,
    0.008158326148986816,
    0.00816887617111206,
    0.00817936658859253,
    0.008189022541046143,
    0.008199632167816162,
    0.008210301399230957,
    0.008221089839935303,
    0.008231103420257568,
    0.008241474628448486,
    0.008251667022705078,
    0.008262097835540771,
    0.008272767066955566,
    0.008283019065856934,
    0.008293211460113525,
    0.008303701877593994,
    0.008314430713653564,
    0.008324205875396729,
    0.008334934711456299,
    0.008345603942871094,
    0.008355557918548584,
    0.008365988731384277,
    0.008376538753509521,
    0.008386611938476562,
    0.008396923542022705,
    0.008407652378082275,
    0.008418023586273193,
    0.00842815637588501,
    0.008438646793365479,
    0.008449137210845947,
    0.008459508419036865,
    0.008469939231872559,
    0.008479714393615723,
    0.008490979671478271,
    0.008500516414642334,
    0.008511602878570557,
    0.008521795272827148,
    0.008532166481018066,
    0.008542478084564209,
    0.0085526704788208,
    0.008563399314880371,
    0.008573532104492188,
    0.008584082126617432,
    0.008594512939453125,
    0.008604943752288818,
    0.00861513614654541,
    0.00862574577331543,
    0.008636236190795898,
    0.008646607398986816,
    0.008657097816467285,
    0.008667230606079102,
    0.008678078651428223,
    0.008688032627105713,
    0.008698821067810059,
    0.008709251880645752,
    0.008719682693481445,
    0.008729755878448486,
    0.008740544319152832,
    0.008751451969146729,
    0.008761286735534668,
    0.008771777153015137,
    0.008782804012298584,
    0.0087929368019104,
    0.008803367614746094,
    0.008813977241516113,
    0.008824467658996582,
    0.008834898471832275,
    0.008845508098602295,
    0.008856058120727539,
    0.008866727352142334,
    0.008877158164978027,
    0.008887290954589844,
    0.008898258209228516,
    0.00890880823135376,
    0.008919298648834229,
    0.008929967880249023,
    0.008940160274505615,
    0.008951365947723389,
    0.008961617946624756,
    0.008972644805908203,
    0.008982717990875244,
    0.008993566036224365,
    0.009003937244415283,
    0.009014785289764404,
    0.009025633335113525,
    0.009036421775817871,
    0.009046375751495361,
    0.009057760238647461,
    0.009067714214324951,
    0.009079039096832275,
    0.009089469909667969,
    0.009100198745727539,
    0.009111285209655762,
    0.009121477603912354,
    0.0091322660446167,
    0.009143590927124023,
    0.009153902530670166,
    0.00916445255279541,
    0.009175598621368408,
    0.009186208248138428,
    0.009196877479553223,
    0.00920802354812622,
    0.009218811988830566,
    0.00923001766204834,
    0.009240031242370605,
    0.009251058101654053,
    0.00926274061203003,
    0.009272933006286621,
    0.009283781051635742,
    0.009294986724853516,
    0.009305834770202637,
    0.009316682815551758,
    0.009327530860900879,
    0.009338140487670898,
    0.009349644184112549,
    0.009360730648040771,
    0.00937122106552124,
    0.009382307529449463,
    0.009393870830535889,
    0.009404301643371582,
    0.00941544771194458,
    0.009426891803741455,
    0.009437143802642822,
    0.009449005126953125,
    0.009459733963012695,
    0.009470701217651367,
    0.009482145309448242,
    0.009492933750152588,
    0.009504258632659912,
    0.009515643119812012,
    0.009526073932647705,
    0.009537994861602783,
    0.009548962116241455,
    0.009560346603393555,
    0.009571433067321777,
    0.009582698345184326,
    0.0095939040184021,
    0.009605109691619873,
    0.009615838527679443,
    0.009627997875213623,
    0.009638786315917969,
    0.009650349617004395,
    0.009661614894866943,
    0.009672939777374268,
    0.009683966636657715,
    0.00969618558883667,
    0.009706974029541016,
    0.009718358516693115,
    0.009730041027069092,
    0.00974130630493164,
    0.009752392768859863,
    0.009764432907104492,
    0.009775340557098389,
    0.009787440299987793,
    0.009799063205718994,
    0.00980997085571289,
    0.009821653366088867,
    0.009833276271820068,
    0.009845495223999023,
    0.009856104850769043,
    0.009868204593658447,
    0.0098799467086792,
    0.009890973567962646,
    0.00990307331085205,
    0.009915053844451904,
    0.009926080703735352,
    0.009938657283782959,
    0.00994950532913208,
    0.009961545467376709,
    0.009973347187042236,
    0.009984850883483887,
    0.009996771812438965,
    0.010008513927459717,
    0.010020554065704346,
    0.010032117366790771,
    0.010043680667877197,
    0.010056138038635254,
    0.010068178176879883,
    0.010079443454742432,
    0.010091543197631836,
    0.010103583335876465,
    0.010115742683410645,
    0.010127782821655273,
    0.010139405727386475,
    0.01015162467956543,
    0.01016312837600708,
    0.010175466537475586,
    0.01018822193145752,
    0.010199368000030518,
    0.010211467742919922,
    0.010223627090454102,
    0.01023632287979126,
    0.010248005390167236,
    0.010260343551635742,
    0.0102730393409729,
    0.010284125804901123,
    0.010296821594238281,
    0.010309100151062012,
    0.010321259498596191,
    0.01033395528793335,
    0.010345399379730225,
    0.010358214378356934,
    0.010370790958404541,
    0.01038271188735962,
    0.010394871234893799,
    0.010407209396362305,
    0.010420501232147217,
    0.010432064533233643,
    0.010444879531860352,
    0.010457277297973633,
    0.010469555854797363,
    0.010482311248779297,
    0.010494709014892578,
    0.010507166385650635,
    0.010519266128540039,
    0.0105324387550354,
    0.010544776916503906,
    0.010557472705841064,
    0.010569989681243896,
    0.010582447052001953,
    0.01059567928314209,
    0.010608136653900146,
    0.0106201171875,
    0.010633885860443115,
    0.010645627975463867,
    0.010658681392669678,
    0.010671615600585938,
    0.010684311389923096,
    0.01069718599319458,
    0.010710299015045166,
    0.010722875595092773,
    0.010735809803009033,
    0.01074838638305664,
    0.010761559009552002,
    0.010773956775665283,
    0.010787606239318848,
    0.010799944400787354,
    0.010813117027282715,
    0.01082676649093628,
    0.010839104652404785,
    0.010852038860321045,
    0.010865211486816406,
    0.010878503322601318,
    0.010891139507293701,
    0.010904252529144287,
    0.010917603969573975,
    0.010930955410003662,
    0.010944366455078125,
    0.010956883430480957,
    0.01097041368484497,
    0.010983467102050781,
    0.010996818542480469,
    0.011009693145751953,
    0.011023938655853271,
    0.011036217212677002,
    0.011050105094909668,
    0.011063337326049805,
    0.011076688766479492,
    0.011089503765106201,
    0.011103630065917969,
    0.011116564273834229,
    0.011130213737487793,
    0.011144042015075684,
    0.011157095432281494,
    0.011170685291290283,
    0.011184394359588623,
    0.011197566986083984,
    0.011211514472961426,
    0.011224925518035889,
    0.011237859725952148,
    0.011252641677856445,
    0.011265277862548828,
    0.011279106140136719,
    0.011293292045593262,
    0.011306583881378174,
    0.011320352554321289,
    0.01133418083190918,
    0.011347949504852295,
    0.011361956596374512,
    0.011375248432159424,
    0.011389195919036865,
    0.01140296459197998,
    0.011416912078857422,
    0.011430561542510986,
    0.011445164680480957,
    0.01145857572555542,
    0.011472165584564209,
    0.011486709117889404,
    0.011500895023345947,
    0.011513888835906982,
    0.011528313159942627,
    0.011543035507202148,
    0.01155620813369751,
    0.011570513248443604,
    0.011584758758544922,
    0.011598408222198486,
    0.01161283254623413,
    0.011627137660980225,
    0.011641442775726318,
    0.011654973030090332,
    0.011669695377349854,
    0.011683285236358643,
    0.011698246002197266,
    0.01171267032623291,
    0.011726319789886475,
    0.011740803718566895,
    0.011755049228668213,
    0.011770009994506836,
    0.011783480644226074,
    0.011798202991485596,
    0.011812984943389893,
    0.011827349662780762,
    0.011841356754302979,
    0.011855661869049072,
    0.011870741844177246,
    0.01188504695892334,
    0.011899948120117188,
    0.011913657188415527,
    0.011928439140319824,
    0.011943340301513672,
    0.01195746660232544,
    0.011972784996032715,
    0.01198667287826538,
    0.012001872062683105,
    0.01201695203781128,
    0.012030363082885742,
    0.012046337127685547,
    0.01205974817276001,
    0.012075841426849365,
    0.012089371681213379,
    0.012104511260986328,
    0.012120306491851807,
    0.012134075164794922,
    0.012149393558502197,
    0.012164950370788574,
    0.012178957462310791,
    0.012193441390991211,
    0.012208998203277588,
    0.012224316596984863,
    0.01223844289779663,
    0.012253820896148682,
    0.012269198894500732,
    0.012283384799957275,
    0.012298285961151123,
    0.012314140796661377,
    0.012329518795013428,
    0.012343645095825195,
    0.01235949993133545,
    0.012374401092529297,
    0.012389838695526123,
    0.012403726577758789,
    0.012420713901519775,
    0.01243501901626587,
    0.012450098991394043,
    0.012465953826904297,
    0.012481212615966797,
    0.012496113777160645,
    0.012511134147644043,
    0.01252681016921997,
    0.012542366981506348,
    0.012557566165924072,
    0.012573003768920898,
    0.01258838176727295,
    0.012604236602783203,
    0.012619316577911377,
    0.012634694576263428,
    0.012650012969970703,
    0.012665987014770508,
    0.01268160343170166,
    0.01269674301147461,
    0.012712061405181885,
    0.012728452682495117,
    0.012743234634399414,
    0.012759208679199219,
    0.012774646282196045,
    0.012790262699127197,
    0.012806475162506104,
    0.012821197509765625,
    0.012838125228881836,
    0.012853264808654785,
    0.012868702411651611,
    0.012884855270385742,
    0.012900590896606445,
    0.012916624546051025,
    0.01293259859085083,
    0.012948036193847656,
    0.012963652610778809,
    0.012980461120605469,
    0.012995243072509766,
    0.013011395931243896,
    0.013028383255004883,
    0.01304328441619873,
    0.01305919885635376,
    0.01307535171508789,
    0.013091802597045898,
    0.013107657432556152,
    0.013123035430908203,
    0.013139963150024414,
    0.013155937194824219,
    0.013171195983886719,
    0.013188540935516357,
    0.013204574584960938,
    0.013219237327575684,
    0.013236522674560547,
    0.01325315237045288,
    0.013268828392028809,
    0.01328498125076294,
    0.013301253318786621,
    0.013317465782165527,
    0.013334691524505615,
    0.013349711894989014,
    0.013366162776947021,
    0.013383269309997559,
    0.013398528099060059,
    0.013415992259979248,
    0.013432025909423828,
    0.013448596000671387,
    0.01346498727798462,
    0.013480961322784424,
    0.013497531414031982,
    0.013514816761016846,
    0.013530313968658447,
    0.013547420501708984,
    0.01356363296508789,
    0.013580679893493652,
    0.013596415519714355,
    0.013613522052764893,
    0.013630509376525879,
    0.013646483421325684,
    0.013663411140441895,
    0.01368027925491333,
    0.013696551322937012,
    0.013713598251342773,
    0.013729691505432129,
    0.013746798038482666,
    0.013763844966888428,
    0.013780832290649414,
    0.013796567916870117,
    0.01381462812423706,
    0.013830065727233887,
    0.013847768306732178,
    0.013864755630493164,
    0.013881325721740723,
    0.013898015022277832,
    0.013915538787841797,
    0.013931870460510254,
    0.013949155807495117,
    0.0139656662940979,
    0.013982534408569336,
    0.014000177383422852,
    0.014016807079315186,
    0.014033794403076172,
    0.014051318168640137,
    0.014067590236663818,
    0.014085233211517334,
    0.014102280139923096
  ],
            use_karras_sigmas=False
        )
        self.inf_scheduler = EulerDiscreteScheduler(
            beta_end=0.012,
            beta_schedule="scaled_linear",
            beta_start=0.00085,
            # clip_sample=False,
            final_sigmas_type="zero",
            interpolation_type="linear",
            num_train_timesteps=1000,
            prediction_type="epsilon",
            rescale_betas_zero_snr=False,
            # set_alpha_to_one=False,
            sigma_max= None,
            sigma_min= None,
            # skip_prk_steps=True,
            steps_offset=1,
            timestep_spacing="leading",
            timestep_type=" discrete",
            trained_betas=[
    0.0008500218391418457,
    0.0008582472801208496,
    0.0008664727210998535,
    0.0008749961853027344,
    0.0008832216262817383,
    0.0008918046951293945,
    0.0009001493453979492,
    0.0009087920188903809,
    0.0009173750877380371,
    0.000925898551940918,
    0.0009347200393676758,
    0.0009434223175048828,
    0.0009522438049316406,
    0.0009611248970031738,
    0.0009697675704956055,
    0.000979006290435791,
    0.000987708568572998,
    0.0009968876838684082,
    0.0010061264038085938,
    0.0010150671005249023,
    0.0010243058204650879,
    0.0010336637496948242,
    0.0010426640510559082,
    0.0010523200035095215,
    0.0010616183280944824,
    0.0010709166526794434,
    0.001080632209777832,
    0.0010899901390075684,
    0.0010996460914611816,
    0.001109302043914795,
    0.0011188983917236328,
    0.0011286735534667969,
    0.0011385083198547363,
    0.0011484026908874512,
    0.001158297061920166,
    0.0011683106422424316,
    0.001178145408630371,
    0.0011883378028869629,
    0.0011985301971435547,
    0.0012086033821105957,
    0.0012186765670776367,
    0.0012289881706237793,
    0.0012392997741699219,
    0.001249849796295166,
    0.0012600421905517578,
    0.0012707114219665527,
    0.0012810826301574707,
    0.0012917518615722656,
    0.0013022422790527344,
    0.0013130903244018555,
    0.001323699951171875,
    0.00133436918258667,
    0.0013453364372253418,
    0.0013563036918640137,
    0.0013669729232788086,
    0.001378178596496582,
    0.0013890266418457031,
    0.0014002323150634766,
    0.0014113783836364746,
    0.0014225244522094727,
    0.0014339089393615723,
    0.001444995403289795,
    0.0014562606811523438,
    0.001467883586883545,
    0.0014792084693908691,
    0.001490771770477295,
    0.0015022754669189453,
    0.0015138983726501465,
    0.001525580883026123,
    0.0015372037887573242,
    0.0015489459037780762,
    0.0015606880187988281,
    0.0015726089477539062,
    0.0015844106674194336,
    0.0015966296195983887,
    0.0016083121299743652,
    0.0016205310821533203,
    0.0016325712203979492,
    0.0016446113586425781,
    0.0016570091247558594,
    0.0016692876815795898,
    0.0016813874244689941,
    0.0016939043998718262,
    0.0017061829566955566,
    0.0017186999320983887,
    0.0017312169075012207,
    0.0017435550689697266,
    0.001756429672241211,
    0.0017690658569335938,
    0.0017815232276916504,
    0.0017943978309631348,
    0.0018072128295898438,
    0.0018199682235717773,
    0.0018328428268432617,
    0.0018459558486938477,
    0.0018587112426757812,
    0.0018717646598815918,
    0.001885056495666504,
    0.0018978714942932129,
    0.0019112825393676758,
    0.0019244551658630371,
    0.0019376277923583984,
    0.0019510984420776367,
    0.001964390277862549,
    0.001977682113647461,
    0.0019913315773010254,
    0.0020046234130859375,
    0.002018272876739502,
    0.002031862735748291,
    0.00204545259475708,
    0.0020591020584106445,
    0.0020728707313537598,
    0.0020866990089416504,
    0.002100229263305664,
    0.0021143555641174316,
    0.0021281838417053223,
    0.002142012119293213,
    0.0021562576293945312,
    0.002169966697692871,
    0.002184271812438965,
    0.002198338508605957,
    0.0022124648094177246,
    0.002226710319519043,
    0.0022409558296203613,
    0.0022553205490112305,
    0.002269446849822998,
    0.002283751964569092,
    0.0022984743118286133,
    0.002312600612640381,
    0.002327263355255127,
    0.0023416876792907715,
    0.002356410026550293,
    0.002370893955230713,
    0.002385437488555908,
    0.0024001598358154297,
    0.0024150609970092773,
    0.0024295449256896973,
    0.002444624900817871,
    0.0024593472480773926,
    0.0024742484092712402,
    0.0024889111518859863,
    0.0025042295455932617,
    0.002518892288208008,
    0.002534210681915283,
    0.002549111843109131,
    0.0025641322135925293,
    0.002579212188720703,
    0.0025945305824279785,
    0.0026097893714904785,
    0.002624988555908203,
    0.0026398301124572754,
    0.0026556849479675293,
    0.002670764923095703,
    0.002686142921447754,
    0.002701401710510254,
    0.002716958522796631,
    0.002732515335083008,
    0.0027478933334350586,
    0.00276339054107666,
    0.002778947353363037,
    0.002794325351715088,
    0.0028104186058044434,
    0.0028257369995117188,
    0.0028415322303771973,
    0.002857208251953125,
    0.0028727054595947266,
    0.0028885602951049805,
    0.0029042959213256836,
    0.002920210361480713,
    0.002935945987701416,
    0.0029518604278564453,
    0.0029678940773010254,
    0.0029836297035217285,
    0.002999424934387207,
    0.0030155181884765625,
    0.003031611442565918,
    0.0030474066734313965,
    0.0030636191368103027,
    0.0030795931816101074,
    0.003095567226409912,
    0.0031116604804992676,
    0.0031279325485229492,
    0.00314408540725708,
    0.0031600594520568848,
    0.003176450729370117,
    0.003192424774169922,
    0.0032088160514831543,
    0.003224968910217285,
    0.0032411813735961914,
    0.0032578110694885254,
    0.0032737255096435547,
    0.003290116786956787,
    0.0033065080642700195,
    0.0033227205276489258,
    0.003339111804962158,
    0.0033554434776306152,
    0.0033720731735229492,
    0.00338822603225708,
    0.003404676914215088,
    0.003421485424041748,
    0.0034373998641967773,
    0.003454148769378662,
    0.0034706592559814453,
    0.003486812114715576,
    0.0035036802291870117,
    0.0035200119018554688,
    0.003536522388458252,
    0.003553152084350586,
    0.0035695433616638184,
    0.003586292266845703,
    0.00360262393951416,
    0.0036193132400512695,
    0.0036358237266540527,
    0.003652513027191162,
    0.0036689043045043945,
    0.003685891628265381,
    0.0037020444869995117,
    0.003718852996826172,
    0.003735482692718506,
    0.00375211238861084,
    0.003768742084503174,
    0.0037853121757507324,
    0.003802061080932617,
    0.003818511962890625,
    0.003835022449493408,
    0.0038521289825439453,
    0.003868579864501953,
    0.0038851499557495117,
    0.003901958465576172,
    0.0039182305335998535,
    0.0039351582527160645,
    0.003951907157897949,
    0.003968358039855957,
    0.003984987735748291,
    0.004001915454864502,
    0.004018306732177734,
    0.004035055637359619,
    0.004051506519317627,
    0.004068493843078613,
    0.004084885120391846,
    0.0041016340255737305,
    0.004118144512176514,
    0.004134833812713623,
    0.004151523113250732,
    0.00416797399520874,
    0.004184901714324951,
    0.004201114177703857,
    0.004218101501464844,
    0.004234433174133301,
    0.004250824451446533,
    0.004267513751983643,
    0.004284381866455078,
    0.004300832748413086,
    0.004317104816436768,
    0.004333794116973877,
    0.004350185394287109,
    0.0043669939041137695,
    0.004383742809295654,
    0.004399538040161133,
    0.004416525363922119,
    0.00443267822265625,
    0.0044495463371276855,
    0.004465699195861816,
    0.0044822096824646,
    0.004498720169067383,
    0.004515111446380615,
    0.004531443119049072,
    0.00454789400100708,
    0.004564106464385986,
    0.00458073616027832,
    0.004596889019012451,
    0.00461345911026001,
    0.004629552364349365,
    0.004645943641662598,
    0.004662156105041504,
    0.0046784281730651855,
    0.004694879055023193,
    0.004710793495178223,
    0.0047272443771362305,
    0.004743337631225586,
    0.004759430885314941,
    0.0047757625579833984,
    0.00479203462600708,
    0.004807949066162109,
    0.004823923110961914,
    0.004840373992919922,
    0.004855930805206299,
    0.004872500896453857,
    0.004888415336608887,
    0.00490415096282959,
    0.0049201250076293945,
    0.004936635494232178,
    0.004952073097229004,
    0.004968225955963135,
    0.004984140396118164,
    0.004999756813049316,
    0.005015909671783447,
    0.005031466484069824,
    0.0050473809242248535,
    0.005063414573669434,
    0.005078792572021484,
    0.005094766616821289,
    0.005110442638397217,
    0.005125999450683594,
    0.0051419734954833984,
    0.005157411098480225,
    0.005173146724700928,
    0.005188584327697754,
    0.005204141139984131,
    0.005219817161560059,
    0.0052353739738464355,
    0.005250751972198486,
    0.005266308784484863,
    0.005281627178192139,
    0.00529712438583374,
    0.005312561988830566,
    0.005328118801116943,
    0.005342960357666016,
    0.005358576774597168,
    0.005373716354370117,
    0.005389392375946045,
    0.005404055118560791,
    0.005419552326202393,
    0.005434632301330566,
    0.005449950695037842,
    0.005464911460876465,
    0.005479872226715088,
    0.0054950714111328125,
    0.0055100321769714355,
    0.005525112152099609,
    0.005540370941162109,
    0.0055550336837768555,
    0.005569815635681152,
    0.005585074424743652,
    0.005599677562713623,
    0.005614638328552246,
    0.005629241466522217,
    0.005644083023071289,
    0.005658924579620361,
    0.005673587322235107,
    0.005688309669494629,
    0.005702853202819824,
    0.005717456340789795,
    0.005732238292694092,
    0.005746901035308838,
    0.005761444568634033,
    0.005775570869445801,
    0.0057904720306396484,
    0.00580441951751709,
    0.005819261074066162,
    0.005833685398101807,
    0.005847752094268799,
    0.005862236022949219,
    0.005876779556274414,
    0.0058907270431518555,
    0.005904972553253174,
    0.005919098854064941,
    0.005933403968811035,
    0.005947589874267578,
    0.005961596965789795,
    0.005975544452667236,
    0.005990087985992432,
    0.0060037970542907715,
    0.006017804145812988,
    0.006031692028045654,
    0.006045997142791748,
    0.006059467792510986,
    0.006073415279388428,
    0.0060874223709106445,
    0.006100952625274658,
    0.006115138530731201,
    0.006128549575805664,
    0.006142616271972656,
    0.00615614652633667,
    0.006169676780700684,
    0.006183266639709473,
    0.006197214126586914,
    0.0062103271484375,
    0.006224215030670166,
    0.006237387657165527,
    0.006251215934753418,
    0.0062645673751831055,
    0.006277859210968018,
    0.006291508674621582,
    0.006304740905761719,
    0.006318032741546631,
    0.006331145763397217,
    0.006344795227050781,
    0.006357908248901367,
    0.00637131929397583,
    0.006383836269378662,
    0.0063974857330322266,
    0.006410539150238037,
    0.006423592567443848,
    0.006436645984649658,
    0.006449759006500244,
    0.0064626336097717285,
    0.0064757466316223145,
    0.0064885616302490234,
    0.006501555442810059,
    0.006514489650726318,
    0.006527304649353027,
    0.0065400004386901855,
    0.006552934646606445,
    0.0065659284591674805,
    0.006578564643859863,
    0.006591081619262695,
    0.006604015827178955,
    0.00661623477935791,
    0.006629467010498047,
    0.0066419243812561035,
    0.006654262542724609,
    0.006666779518127441,
    0.0066794753074646,
    0.006692171096801758,
    0.006704509258270264,
    0.006716728210449219,
    0.0067293643951416016,
    0.006741642951965332,
    0.006754100322723389,
    0.006766676902770996,
    0.00677865743637085,
    0.00679093599319458,
    0.0068032145500183105,
    0.006815731525421143,
    0.006827831268310547,
    0.006839931011199951,
    0.0068520307540893555,
    0.006864368915557861,
    0.006876170635223389,
    0.0068888068199157715,
    0.006900370121002197,
    0.006912589073181152,
    0.00692439079284668,
    0.0069367289543151855,
    0.006948232650756836,
    0.006960690021514893,
    0.0069724321365356445,
    0.006984353065490723,
    0.006996214389801025,
    0.007007777690887451,
    0.007019937038421631,
    0.007031738758087158,
    0.007043302059173584,
    0.007055163383483887,
    0.0070667266845703125,
    0.007078826427459717,
    0.007090449333190918,
    0.007101655006408691,
    0.007113516330718994,
    0.007125377655029297,
    0.007136821746826172,
    0.007148265838623047,
    0.0071604251861572266,
    0.007171511650085449,
    0.007182776927947998,
    0.007194578647613525,
    0.007205784320831299,
    0.007218062877655029,
    0.0072286128997802734,
    0.00724029541015625,
    0.0072515010833740234,
    0.00726318359375,
    0.007274448871612549,
    0.00728607177734375,
    0.007297098636627197,
    0.0073084235191345215,
    0.007319629192352295,
    0.007331192493438721,
    0.007342278957366943,
    0.007353425025939941,
    0.0073645710945129395,
    0.0073757171630859375,
    0.007386982440948486,
    0.007398247718811035,
    0.007409632205963135,
    0.00742030143737793,
    0.007431685924530029,
    0.007442593574523926,
    0.007453799247741699,
    0.007465004920959473,
    0.007475733757019043,
    0.00748676061630249,
    0.007497966289520264,
    0.007509052753448486,
    0.007519781589508057,
    0.0075310468673706055,
    0.007541775703430176,
    0.007552385330200195,
    0.007563769817352295,
    0.007574498653411865,
    0.0075855255126953125,
    0.007596433162689209,
    0.0076073408126831055,
    0.007618069648742676,
    0.007628798484802246,
    0.007639527320861816,
    0.0076506733894348145,
    0.007661342620849609,
    0.007671833038330078,
    0.007683396339416504,
    0.007693350315093994,
    0.007704555988311768,
    0.007715106010437012,
    0.007726132869720459,
    0.007736921310424805,
    0.007746696472167969,
    0.00775831937789917,
    0.007768750190734863,
    0.007779479026794434,
    0.007789909839630127,
    0.00780099630355835,
    0.007811069488525391,
    0.007822036743164062,
    0.007833003997802734,
    0.007843196392059326,
    0.007853686809539795,
    0.007864296436309814,
    0.00787508487701416,
    0.00788569450378418,
    0.007896125316619873,
    0.007906794548034668,
    0.007917165756225586,
    0.00792759656906128,
    0.007938683032989502,
    0.007948637008666992,
    0.007959544658660889,
    0.007969796657562256,
    0.007980644702911377,
    0.007990837097167969,
    0.008001506328582764,
    0.008012115955352783,
    0.008021891117095947,
    0.008033215999603271,
    0.008043408393859863,
    0.008053600788116455,
    0.0080643892288208,
    0.00807487964630127,
    0.008085012435913086,
    0.008095622062683105,
    0.008106350898742676,
    0.008116483688354492,
    0.008126974105834961,
    0.008137106895446777,
    0.008147656917572021,
    0.008158326148986816,
    0.00816887617111206,
    0.00817936658859253,
    0.008189022541046143,
    0.008199632167816162,
    0.008210301399230957,
    0.008221089839935303,
    0.008231103420257568,
    0.008241474628448486,
    0.008251667022705078,
    0.008262097835540771,
    0.008272767066955566,
    0.008283019065856934,
    0.008293211460113525,
    0.008303701877593994,
    0.008314430713653564,
    0.008324205875396729,
    0.008334934711456299,
    0.008345603942871094,
    0.008355557918548584,
    0.008365988731384277,
    0.008376538753509521,
    0.008386611938476562,
    0.008396923542022705,
    0.008407652378082275,
    0.008418023586273193,
    0.00842815637588501,
    0.008438646793365479,
    0.008449137210845947,
    0.008459508419036865,
    0.008469939231872559,
    0.008479714393615723,
    0.008490979671478271,
    0.008500516414642334,
    0.008511602878570557,
    0.008521795272827148,
    0.008532166481018066,
    0.008542478084564209,
    0.0085526704788208,
    0.008563399314880371,
    0.008573532104492188,
    0.008584082126617432,
    0.008594512939453125,
    0.008604943752288818,
    0.00861513614654541,
    0.00862574577331543,
    0.008636236190795898,
    0.008646607398986816,
    0.008657097816467285,
    0.008667230606079102,
    0.008678078651428223,
    0.008688032627105713,
    0.008698821067810059,
    0.008709251880645752,
    0.008719682693481445,
    0.008729755878448486,
    0.008740544319152832,
    0.008751451969146729,
    0.008761286735534668,
    0.008771777153015137,
    0.008782804012298584,
    0.0087929368019104,
    0.008803367614746094,
    0.008813977241516113,
    0.008824467658996582,
    0.008834898471832275,
    0.008845508098602295,
    0.008856058120727539,
    0.008866727352142334,
    0.008877158164978027,
    0.008887290954589844,
    0.008898258209228516,
    0.00890880823135376,
    0.008919298648834229,
    0.008929967880249023,
    0.008940160274505615,
    0.008951365947723389,
    0.008961617946624756,
    0.008972644805908203,
    0.008982717990875244,
    0.008993566036224365,
    0.009003937244415283,
    0.009014785289764404,
    0.009025633335113525,
    0.009036421775817871,
    0.009046375751495361,
    0.009057760238647461,
    0.009067714214324951,
    0.009079039096832275,
    0.009089469909667969,
    0.009100198745727539,
    0.009111285209655762,
    0.009121477603912354,
    0.0091322660446167,
    0.009143590927124023,
    0.009153902530670166,
    0.00916445255279541,
    0.009175598621368408,
    0.009186208248138428,
    0.009196877479553223,
    0.00920802354812622,
    0.009218811988830566,
    0.00923001766204834,
    0.009240031242370605,
    0.009251058101654053,
    0.00926274061203003,
    0.009272933006286621,
    0.009283781051635742,
    0.009294986724853516,
    0.009305834770202637,
    0.009316682815551758,
    0.009327530860900879,
    0.009338140487670898,
    0.009349644184112549,
    0.009360730648040771,
    0.00937122106552124,
    0.009382307529449463,
    0.009393870830535889,
    0.009404301643371582,
    0.00941544771194458,
    0.009426891803741455,
    0.009437143802642822,
    0.009449005126953125,
    0.009459733963012695,
    0.009470701217651367,
    0.009482145309448242,
    0.009492933750152588,
    0.009504258632659912,
    0.009515643119812012,
    0.009526073932647705,
    0.009537994861602783,
    0.009548962116241455,
    0.009560346603393555,
    0.009571433067321777,
    0.009582698345184326,
    0.0095939040184021,
    0.009605109691619873,
    0.009615838527679443,
    0.009627997875213623,
    0.009638786315917969,
    0.009650349617004395,
    0.009661614894866943,
    0.009672939777374268,
    0.009683966636657715,
    0.00969618558883667,
    0.009706974029541016,
    0.009718358516693115,
    0.009730041027069092,
    0.00974130630493164,
    0.009752392768859863,
    0.009764432907104492,
    0.009775340557098389,
    0.009787440299987793,
    0.009799063205718994,
    0.00980997085571289,
    0.009821653366088867,
    0.009833276271820068,
    0.009845495223999023,
    0.009856104850769043,
    0.009868204593658447,
    0.0098799467086792,
    0.009890973567962646,
    0.00990307331085205,
    0.009915053844451904,
    0.009926080703735352,
    0.009938657283782959,
    0.00994950532913208,
    0.009961545467376709,
    0.009973347187042236,
    0.009984850883483887,
    0.009996771812438965,
    0.010008513927459717,
    0.010020554065704346,
    0.010032117366790771,
    0.010043680667877197,
    0.010056138038635254,
    0.010068178176879883,
    0.010079443454742432,
    0.010091543197631836,
    0.010103583335876465,
    0.010115742683410645,
    0.010127782821655273,
    0.010139405727386475,
    0.01015162467956543,
    0.01016312837600708,
    0.010175466537475586,
    0.01018822193145752,
    0.010199368000030518,
    0.010211467742919922,
    0.010223627090454102,
    0.01023632287979126,
    0.010248005390167236,
    0.010260343551635742,
    0.0102730393409729,
    0.010284125804901123,
    0.010296821594238281,
    0.010309100151062012,
    0.010321259498596191,
    0.01033395528793335,
    0.010345399379730225,
    0.010358214378356934,
    0.010370790958404541,
    0.01038271188735962,
    0.010394871234893799,
    0.010407209396362305,
    0.010420501232147217,
    0.010432064533233643,
    0.010444879531860352,
    0.010457277297973633,
    0.010469555854797363,
    0.010482311248779297,
    0.010494709014892578,
    0.010507166385650635,
    0.010519266128540039,
    0.0105324387550354,
    0.010544776916503906,
    0.010557472705841064,
    0.010569989681243896,
    0.010582447052001953,
    0.01059567928314209,
    0.010608136653900146,
    0.0106201171875,
    0.010633885860443115,
    0.010645627975463867,
    0.010658681392669678,
    0.010671615600585938,
    0.010684311389923096,
    0.01069718599319458,
    0.010710299015045166,
    0.010722875595092773,
    0.010735809803009033,
    0.01074838638305664,
    0.010761559009552002,
    0.010773956775665283,
    0.010787606239318848,
    0.010799944400787354,
    0.010813117027282715,
    0.01082676649093628,
    0.010839104652404785,
    0.010852038860321045,
    0.010865211486816406,
    0.010878503322601318,
    0.010891139507293701,
    0.010904252529144287,
    0.010917603969573975,
    0.010930955410003662,
    0.010944366455078125,
    0.010956883430480957,
    0.01097041368484497,
    0.010983467102050781,
    0.010996818542480469,
    0.011009693145751953,
    0.011023938655853271,
    0.011036217212677002,
    0.011050105094909668,
    0.011063337326049805,
    0.011076688766479492,
    0.011089503765106201,
    0.011103630065917969,
    0.011116564273834229,
    0.011130213737487793,
    0.011144042015075684,
    0.011157095432281494,
    0.011170685291290283,
    0.011184394359588623,
    0.011197566986083984,
    0.011211514472961426,
    0.011224925518035889,
    0.011237859725952148,
    0.011252641677856445,
    0.011265277862548828,
    0.011279106140136719,
    0.011293292045593262,
    0.011306583881378174,
    0.011320352554321289,
    0.01133418083190918,
    0.011347949504852295,
    0.011361956596374512,
    0.011375248432159424,
    0.011389195919036865,
    0.01140296459197998,
    0.011416912078857422,
    0.011430561542510986,
    0.011445164680480957,
    0.01145857572555542,
    0.011472165584564209,
    0.011486709117889404,
    0.011500895023345947,
    0.011513888835906982,
    0.011528313159942627,
    0.011543035507202148,
    0.01155620813369751,
    0.011570513248443604,
    0.011584758758544922,
    0.011598408222198486,
    0.01161283254623413,
    0.011627137660980225,
    0.011641442775726318,
    0.011654973030090332,
    0.011669695377349854,
    0.011683285236358643,
    0.011698246002197266,
    0.01171267032623291,
    0.011726319789886475,
    0.011740803718566895,
    0.011755049228668213,
    0.011770009994506836,
    0.011783480644226074,
    0.011798202991485596,
    0.011812984943389893,
    0.011827349662780762,
    0.011841356754302979,
    0.011855661869049072,
    0.011870741844177246,
    0.01188504695892334,
    0.011899948120117188,
    0.011913657188415527,
    0.011928439140319824,
    0.011943340301513672,
    0.01195746660232544,
    0.011972784996032715,
    0.01198667287826538,
    0.012001872062683105,
    0.01201695203781128,
    0.012030363082885742,
    0.012046337127685547,
    0.01205974817276001,
    0.012075841426849365,
    0.012089371681213379,
    0.012104511260986328,
    0.012120306491851807,
    0.012134075164794922,
    0.012149393558502197,
    0.012164950370788574,
    0.012178957462310791,
    0.012193441390991211,
    0.012208998203277588,
    0.012224316596984863,
    0.01223844289779663,
    0.012253820896148682,
    0.012269198894500732,
    0.012283384799957275,
    0.012298285961151123,
    0.012314140796661377,
    0.012329518795013428,
    0.012343645095825195,
    0.01235949993133545,
    0.012374401092529297,
    0.012389838695526123,
    0.012403726577758789,
    0.012420713901519775,
    0.01243501901626587,
    0.012450098991394043,
    0.012465953826904297,
    0.012481212615966797,
    0.012496113777160645,
    0.012511134147644043,
    0.01252681016921997,
    0.012542366981506348,
    0.012557566165924072,
    0.012573003768920898,
    0.01258838176727295,
    0.012604236602783203,
    0.012619316577911377,
    0.012634694576263428,
    0.012650012969970703,
    0.012665987014770508,
    0.01268160343170166,
    0.01269674301147461,
    0.012712061405181885,
    0.012728452682495117,
    0.012743234634399414,
    0.012759208679199219,
    0.012774646282196045,
    0.012790262699127197,
    0.012806475162506104,
    0.012821197509765625,
    0.012838125228881836,
    0.012853264808654785,
    0.012868702411651611,
    0.012884855270385742,
    0.012900590896606445,
    0.012916624546051025,
    0.01293259859085083,
    0.012948036193847656,
    0.012963652610778809,
    0.012980461120605469,
    0.012995243072509766,
    0.013011395931243896,
    0.013028383255004883,
    0.01304328441619873,
    0.01305919885635376,
    0.01307535171508789,
    0.013091802597045898,
    0.013107657432556152,
    0.013123035430908203,
    0.013139963150024414,
    0.013155937194824219,
    0.013171195983886719,
    0.013188540935516357,
    0.013204574584960938,
    0.013219237327575684,
    0.013236522674560547,
    0.01325315237045288,
    0.013268828392028809,
    0.01328498125076294,
    0.013301253318786621,
    0.013317465782165527,
    0.013334691524505615,
    0.013349711894989014,
    0.013366162776947021,
    0.013383269309997559,
    0.013398528099060059,
    0.013415992259979248,
    0.013432025909423828,
    0.013448596000671387,
    0.01346498727798462,
    0.013480961322784424,
    0.013497531414031982,
    0.013514816761016846,
    0.013530313968658447,
    0.013547420501708984,
    0.01356363296508789,
    0.013580679893493652,
    0.013596415519714355,
    0.013613522052764893,
    0.013630509376525879,
    0.013646483421325684,
    0.013663411140441895,
    0.01368027925491333,
    0.013696551322937012,
    0.013713598251342773,
    0.013729691505432129,
    0.013746798038482666,
    0.013763844966888428,
    0.013780832290649414,
    0.013796567916870117,
    0.01381462812423706,
    0.013830065727233887,
    0.013847768306732178,
    0.013864755630493164,
    0.013881325721740723,
    0.013898015022277832,
    0.013915538787841797,
    0.013931870460510254,
    0.013949155807495117,
    0.0139656662940979,
    0.013982534408569336,
    0.014000177383422852,
    0.014016807079315186,
    0.014033794403076172,
    0.014051318168640137,
    0.014067590236663818,
    0.014085233211517334,
    0.014102280139923096
  ],
            use_karras_sigmas=False)
    # Copied from diffusers.pipelines.stable_diffusion_xl.pipeline_stable_diffusion_xl_img2img.prepare_latents
    def prepare_image_latents(
        self,
        image,
        timestep,
        batch_size,
        num_images_per_prompt,
        dtype,
        device,
        generator=None,
        add_noise=True,
    ):
        if not isinstance(image, (torch.Tensor, PIL.Image.Image, list)):
            raise ValueError(
                f"`image` has to be of type `torch.Tensor`, `PIL.Image.Image` or list but is {type(image)}"
            )

        latents_mean = latents_std = None
        if (
            hasattr(self.vae.config, "latents_mean")
            and self.vae.config.latents_mean is not None
        ):
            latents_mean = torch.tensor(self.vae.config.latents_mean).view(1, 4, 1, 1)
        if (
            hasattr(self.vae.config, "latents_std")
            and self.vae.config.latents_std is not None
        ):
            latents_std = torch.tensor(self.vae.config.latents_std).view(1, 4, 1, 1)

        # Offload text encoder if `enable_model_cpu_offload` was enabled
        if hasattr(self, "final_offload_hook") and self.final_offload_hook is not None:
            self.text_encoder_2.to("cpu")
            torch.cuda.empty_cache()

        image = image.to(device=device, dtype=dtype)

        batch_size = batch_size * num_images_per_prompt

        if image.shape[1] == 4:
            init_latents = image

        else:
            # make sure the VAE is in float32 mode, as it overflows in float16
            if self.vae.config.force_upcast:
                image = image.float()
                self.vae.to(dtype=torch.float32)

            if isinstance(generator, list) and len(generator) != batch_size:
                raise ValueError(
                    f"You have passed a list of generators of length {len(generator)}, but requested an effective batch"
                    f" size of {batch_size}. Make sure the batch size matches the length of the generators."
                )

            elif isinstance(generator, list):
                if image.shape[0] < batch_size and batch_size % image.shape[0] == 0:
                    image = torch.cat([image] * (batch_size // image.shape[0]), dim=0)
                elif image.shape[0] < batch_size and batch_size % image.shape[0] != 0:
                    raise ValueError(
                        f"Cannot duplicate `image` of batch size {image.shape[0]} to effective batch_size {batch_size} "
                    )

                init_latents = [
                    retrieve_latents(
                        self.vae.encode(image[i : i + 1]), generator=generator[i]
                    )
                    for i in range(batch_size)
                ]
                init_latents = torch.cat(init_latents, dim=0)
            else:
                init_latents = retrieve_latents(
                    self.vae.encode(image), generator=generator
                )

            if self.vae.config.force_upcast:
                self.vae.to(dtype)

            init_latents = init_latents.to(dtype)
            if latents_mean is not None and latents_std is not None:
                latents_mean = latents_mean.to(device=device, dtype=dtype)
                latents_std = latents_std.to(device=device, dtype=dtype)
                init_latents = (
                    (init_latents - latents_mean)
                    * self.vae.config.scaling_factor
                    / latents_std
                )
            else:
                init_latents = self.vae.config.scaling_factor * init_latents

        if (
            batch_size > init_latents.shape[0]
            and batch_size % init_latents.shape[0] == 0
        ):
            # expand init_latents for batch_size
            additional_image_per_prompt = batch_size // init_latents.shape[0]
            init_latents = torch.cat(
                [init_latents] * additional_image_per_prompt, dim=0
            )
        elif (
            batch_size > init_latents.shape[0]
            and batch_size % init_latents.shape[0] != 0
        ):
            raise ValueError(
                f"Cannot duplicate `image` of batch size {init_latents.shape[0]} to {batch_size} text prompts."
            )
        else:
            init_latents = torch.cat([init_latents], dim=0)

        if add_noise:
            shape = init_latents.shape
            noise = randn_tensor(shape, generator=generator, device=device, dtype=dtype)
            # get latents
            init_latents = self.scheduler.add_noise(init_latents, noise, timestep)

        latents = init_latents

        return latents

    def prepare_control_image(
        self,
        image,
        width,
        height,
        batch_size,
        num_images_per_prompt,
        device,
        dtype,
        do_classifier_free_guidance=False,
        num_empty_images=0,  # for concat in batch like ImageDream
    ):
        assert hasattr(
            self, "control_image_processor"
        ), "control_image_processor is not initialized"

        image = self.control_image_processor.preprocess(
            image, height=height, width=width
        ).to(dtype=torch.float32)

        if num_empty_images > 0:
            image = torch.cat(
                [image, torch.zeros_like(image[:num_empty_images])], dim=0
            )

        image_batch_size = image.shape[0]

        if image_batch_size == 1:
            repeat_by = batch_size
        else:
            # image batch size is the same as prompt batch size
            repeat_by = num_images_per_prompt  # always 1 for control image

        image = image.repeat_interleave(repeat_by, dim=0)

        image = image.to(device=device, dtype=dtype)

        if do_classifier_free_guidance:
            image = torch.cat([image] * 2)

        return image

    @torch.no_grad()
    def __call__(
        self,
        prompt: Union[str, List[str]] = None,
        prompt_2: Optional[Union[str, List[str]]] = None,
        height: Optional[int] = None,
        width: Optional[int] = None,
        num_inference_steps: int = 50,
        timesteps: List[int] = None,
        denoising_end: Optional[float] = None,
        guidance_scale: float = 5.0,
        negative_prompt: Optional[Union[str, List[str]]] = None,
        negative_prompt_2: Optional[Union[str, List[str]]] = None,
        num_images_per_prompt: Optional[int] = 1,
        eta: float = 0.0,
        generator: Optional[Union[torch.Generator, List[torch.Generator]]] = None,
        latents: Optional[torch.FloatTensor] = None,
        prompt_embeds: Optional[torch.FloatTensor] = None,
        negative_prompt_embeds: Optional[torch.FloatTensor] = None,
        pooled_prompt_embeds: Optional[torch.FloatTensor] = None,
        negative_pooled_prompt_embeds: Optional[torch.FloatTensor] = None,
        ip_adapter_image: Optional[PipelineImageInput] = None,
        ip_adapter_image_embeds: Optional[List[torch.FloatTensor]] = None,
        output_type: Optional[str] = "pil",
        return_dict: bool = True,
        cross_attention_kwargs: Optional[Dict[str, Any]] = None,
        guidance_rescale: float = 0.0,
        original_size: Optional[Tuple[int, int]] = None,
        crops_coords_top_left: Tuple[int, int] = (0, 0),
        target_size: Optional[Tuple[int, int]] = None,
        negative_original_size: Optional[Tuple[int, int]] = None,
        negative_crops_coords_top_left: Tuple[int, int] = (0, 0),
        negative_target_size: Optional[Tuple[int, int]] = None,
        clip_skip: Optional[int] = None,
        callback_on_step_end: Optional[Callable[[int, int, Dict], None]] = None,
        callback_on_step_end_tensor_inputs: List[str] = ["latents"],
        # NEW
        mv_scale: float = 1.0,
        # Camera or geometry condition
        control_image: Optional[PipelineImageInput] = None,
        control_conditioning_scale: Optional[float] = 1.0,
        control_conditioning_factor: float = 1.0,
        # Image condition
        reference_image: Optional[PipelineImageInput] = None,
        reference_conditioning_scale: Optional[float] = 1.0,
        folder_name = None,
        **kwargs,
    ):
        r"""
        Function invoked when calling the pipeline for generation.

        Args:
            prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts to guide the image generation. If not defined, one has to pass `prompt_embeds`.
                instead.
            prompt_2 (`str` or `List[str]`, *optional*):
                The prompt or prompts to be sent to the `tokenizer_2` and `text_encoder_2`. If not defined, `prompt` is
                used in both text-encoders
            height (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
                The height in pixels of the generated image. This is set to 1024 by default for the best results.
                Anything below 512 pixels won't work well for
                [stabilityai/stable-diffusion-xl-base-1.0](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0)
                and checkpoints that are not specifically fine-tuned on low resolutions.
            width (`int`, *optional*, defaults to self.unet.config.sample_size * self.vae_scale_factor):
                The width in pixels of the generated image. This is set to 1024 by default for the best results.
                Anything below 512 pixels won't work well for
                [stabilityai/stable-diffusion-xl-base-1.0](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0)
                and checkpoints that are not specifically fine-tuned on low resolutions.
            num_inference_steps (`int`, *optional*, defaults to 50):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            timesteps (`List[int]`, *optional*):
                Custom timesteps to use for the denoising process with schedulers which support a `timesteps` argument
                in their `set_timesteps` method. If not defined, the default behavior when `num_inference_steps` is
                passed will be used. Must be in descending order.
            denoising_end (`float`, *optional*):
                When specified, determines the fraction (between 0.0 and 1.0) of the total denoising process to be
                completed before it is intentionally prematurely terminated. As a result, the returned sample will
                still retain a substantial amount of noise as determined by the discrete timesteps selected by the
                scheduler. The denoising_end parameter should ideally be utilized when this pipeline forms a part of a
                "Mixture of Denoisers" multi-pipeline setup, as elaborated in [**Refining the Image
                Output**](https://huggingface.co/docs/diffusers/api/pipelines/stable_diffusion/stable_diffusion_xl#refining-the-image-output)
            guidance_scale (`float`, *optional*, defaults to 5.0):
                Guidance scale as defined in [Classifier-Free Diffusion Guidance](https://arxiv.org/abs/2207.12598).
                `guidance_scale` is defined as `w` of equation 2. of [Imagen
                Paper](https://arxiv.org/pdf/2205.11487.pdf). Guidance scale is enabled by setting `guidance_scale >
                1`. Higher guidance scale encourages to generate images that are closely linked to the text `prompt`,
                usually at the expense of lower image quality.
            negative_prompt (`str` or `List[str]`, *optional*):
                The prompt or prompts not to guide the image generation. If not defined, one has to pass
                `negative_prompt_embeds` instead. Ignored when not using guidance (i.e., ignored if `guidance_scale` is
                less than `1`).
            negative_prompt_2 (`str` or `List[str]`, *optional*):
                The prompt or prompts not to guide the image generation to be sent to `tokenizer_2` and
                `text_encoder_2`. If not defined, `negative_prompt` is used in both text-encoders
            num_images_per_prompt (`int`, *optional*, defaults to 1):
                The number of images to generate per prompt.
            eta (`float`, *optional*, defaults to 0.0):
                Corresponds to parameter eta (η) in the DDIM paper: https://arxiv.org/abs/2010.02502. Only applies to
                [`schedulers.DDIMScheduler`], will be ignored for others.
            generator (`torch.Generator` or `List[torch.Generator]`, *optional*):
                One or a list of [torch generator(s)](https://pytorch.org/docs/stable/generated/torch.Generator.html)
                to make generation deterministic.
            latents (`torch.FloatTensor`, *optional*):
                Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
                tensor will ge generated by sampling using the supplied random `generator`.
            prompt_embeds (`torch.FloatTensor`, *optional*):
                Pre-generated text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting. If not
                provided, text embeddings will be generated from `prompt` input argument.
            negative_prompt_embeds (`torch.FloatTensor`, *optional*):
                Pre-generated negative text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt
                weighting. If not provided, negative_prompt_embeds will be generated from `negative_prompt` input
                argument.
            pooled_prompt_embeds (`torch.FloatTensor`, *optional*):
                Pre-generated pooled text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt weighting.
                If not provided, pooled text embeddings will be generated from `prompt` input argument.
            negative_pooled_prompt_embeds (`torch.FloatTensor`, *optional*):
                Pre-generated negative pooled text embeddings. Can be used to easily tweak text inputs, *e.g.* prompt
                weighting. If not provided, pooled negative_prompt_embeds will be generated from `negative_prompt`
                input argument.
            ip_adapter_image: (`PipelineImageInput`, *optional*): Optional image input to work with IP Adapters.
            ip_adapter_image_embeds (`List[torch.FloatTensor]`, *optional*):
                Pre-generated image embeddings for IP-Adapter. It should be a list of length same as number of
                IP-adapters. Each element should be a tensor of shape `(batch_size, num_images, emb_dim)`. It should
                contain the negative image embedding if `do_classifier_free_guidance` is set to `True`. If not
                provided, embeddings are computed from the `ip_adapter_image` input argument.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generate image. Choose between
                [PIL](https://pillow.readthedocs.io/en/stable/): `PIL.Image.Image` or `np.array`.
            return_dict (`bool`, *optional*, defaults to `True`):
                Whether or not to return a [`~pipelines.stable_diffusion_xl.StableDiffusionXLPipelineOutput`] instead
                of a plain tuple.
            cross_attention_kwargs (`dict`, *optional*):
                A kwargs dictionary that if specified is passed along to the `AttentionProcessor` as defined under
                `self.processor` in
                [diffusers.models.attention_processor](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/attention_processor.py).
            guidance_rescale (`float`, *optional*, defaults to 0.0):
                Guidance rescale factor proposed by [Common Diffusion Noise Schedules and Sample Steps are
                Flawed](https://arxiv.org/pdf/2305.08891.pdf) `guidance_scale` is defined as `φ` in equation 16. of
                [Common Diffusion Noise Schedules and Sample Steps are Flawed](https://arxiv.org/pdf/2305.08891.pdf).
                Guidance rescale factor should fix overexposure when using zero terminal SNR.
            original_size (`Tuple[int]`, *optional*, defaults to (1024, 1024)):
                If `original_size` is not the same as `target_size` the image will appear to be down- or upsampled.
                `original_size` defaults to `(height, width)` if not specified. Part of SDXL's micro-conditioning as
                explained in section 2.2 of
                [https://huggingface.co/papers/2307.01952](https://huggingface.co/papers/2307.01952).
            crops_coords_top_left (`Tuple[int]`, *optional*, defaults to (0, 0)):
                `crops_coords_top_left` can be used to generate an image that appears to be "cropped" from the position
                `crops_coords_top_left` downwards. Favorable, well-centered images are usually achieved by setting
                `crops_coords_top_left` to (0, 0). Part of SDXL's micro-conditioning as explained in section 2.2 of
                [https://huggingface.co/papers/2307.01952](https://huggingface.co/papers/2307.01952).
            target_size (`Tuple[int]`, *optional*, defaults to (1024, 1024)):
                For most cases, `target_size` should be set to the desired height and width of the generated image. If
                not specified it will default to `(height, width)`. Part of SDXL's micro-conditioning as explained in
                section 2.2 of [https://huggingface.co/papers/2307.01952](https://huggingface.co/papers/2307.01952).
            negative_original_size (`Tuple[int]`, *optional*, defaults to (1024, 1024)):
                To negatively condition the generation process based on a specific image resolution. Part of SDXL's
                micro-conditioning as explained in section 2.2 of
                [https://huggingface.co/papers/2307.01952](https://huggingface.co/papers/2307.01952). For more
                information, refer to this issue thread: https://github.com/huggingface/diffusers/issues/4208.
            negative_crops_coords_top_left (`Tuple[int]`, *optional*, defaults to (0, 0)):
                To negatively condition the generation process based on a specific crop coordinates. Part of SDXL's
                micro-conditioning as explained in section 2.2 of
                [https://huggingface.co/papers/2307.01952](https://huggingface.co/papers/2307.01952). For more
                information, refer to this issue thread: https://github.com/huggingface/diffusers/issues/4208.
            negative_target_size (`Tuple[int]`, *optional*, defaults to (1024, 1024)):
                To negatively condition the generation process based on a target image resolution. It should be as same
                as the `target_size` for most cases. Part of SDXL's micro-conditioning as explained in section 2.2 of
                [https://huggingface.co/papers/2307.01952](https://huggingface.co/papers/2307.01952). For more
                information, refer to this issue thread: https://github.com/huggingface/diffusers/issues/4208.
            callback_on_step_end (`Callable`, *optional*):
                A function that calls at the end of each denoising steps during the inference. The function is called
                with the following arguments: `callback_on_step_end(self: DiffusionPipeline, step: int, timestep: int,
                callback_kwargs: Dict)`. `callback_kwargs` will include a list of all tensors as specified by
                `callback_on_step_end_tensor_inputs`.
            callback_on_step_end_tensor_inputs (`List`, *optional*):
                The list of tensor inputs for the `callback_on_step_end` function. The tensors specified in the list
                will be passed as `callback_kwargs` argument. You will only be able to include variables listed in the
                `._callback_tensor_inputs` attribute of your pipeline class.

        Examples:

        Returns:
            [`~pipelines.stable_diffusion_xl.StableDiffusionXLPipelineOutput`] or `tuple`:
            [`~pipelines.stable_diffusion_xl.StableDiffusionXLPipelineOutput`] if `return_dict` is True, otherwise a
            `tuple`. When returning a tuple, the first element is a list with the generated images.
        """

        callback = kwargs.pop("callback", None)
        callback_steps = kwargs.pop("callback_steps", None)

        if callback is not None:
            deprecate(
                "callback",
                "1.0.0",
                "Passing `callback` as an input argument to `__call__` is deprecated, consider use `callback_on_step_end`",
            )
        if callback_steps is not None:
            deprecate(
                "callback_steps",
                "1.0.0",
                "Passing `callback_steps` as an input argument to `__call__` is deprecated, consider use `callback_on_step_end`",
            )

        # 0. Default height and width to unet
        height = height or self.default_sample_size * self.vae_scale_factor
        width = width or self.default_sample_size * self.vae_scale_factor

        original_size = original_size or (height, width)
        target_size = target_size or (height, width)

        # 1. Check inputs. Raise error if not correct
        self.check_inputs(
            prompt,
            prompt_2,
            height,
            width,
            callback_steps,
            negative_prompt,
            negative_prompt_2,
            prompt_embeds,
            negative_prompt_embeds,
            pooled_prompt_embeds,
            negative_pooled_prompt_embeds,
            ip_adapter_image,
            ip_adapter_image_embeds,
            callback_on_step_end_tensor_inputs,
        )

        self._guidance_scale = guidance_scale
        self._guidance_rescale = guidance_rescale
        self._clip_skip = clip_skip
        self._cross_attention_kwargs = cross_attention_kwargs
        self._denoising_end = denoising_end
        self._interrupt = False

        # 2. Define call parameters
        if prompt is not None and isinstance(prompt, str):
            batch_size = 1
        elif prompt is not None and isinstance(prompt, list):
            batch_size = len(prompt)
        else:
            batch_size = prompt_embeds.shape[0]

        device = self._execution_device

        # 3. Encode input prompt
        lora_scale = (
            self.cross_attention_kwargs.get("scale", None)
            if self.cross_attention_kwargs is not None
            else None
        )

        (
            prompt_embeds,
            negative_prompt_embeds,
            pooled_prompt_embeds,
            negative_pooled_prompt_embeds,
        ) = self.encode_prompt(
            prompt=prompt,
            prompt_2=prompt_2,
            device=device,
            num_images_per_prompt=num_images_per_prompt,
            do_classifier_free_guidance=self.do_classifier_free_guidance,
            negative_prompt=negative_prompt,
            negative_prompt_2=negative_prompt_2,
            prompt_embeds=prompt_embeds,
            negative_prompt_embeds=negative_prompt_embeds,
            pooled_prompt_embeds=pooled_prompt_embeds,
            negative_pooled_prompt_embeds=negative_pooled_prompt_embeds,
            lora_scale=lora_scale,
            clip_skip=self.clip_skip,
        )

        num_timesteps = timesteps
        # 4. Prepare timesteps
        timesteps, num_inference_steps = retrieve_timesteps(
            self.scheduler, num_inference_steps, device, num_timesteps
        )
        inv_timesteps, inv_num_inference_steps = retrieve_timesteps(
            self.inv_scheduler, num_inference_steps, device, num_timesteps
        )
        inf_timesteps, inf_num_inference_steps = retrieve_timesteps(
            self.inf_scheduler, num_inference_steps, device, num_timesteps
        )

        # 5. Prepare latent variables
        num_channels_latents = self.unet.config.in_channels
        latents = self.prepare_latents(
            batch_size * num_images_per_prompt,
            num_channels_latents,
            height,
            width,
            prompt_embeds.dtype,
            device,
            generator,
            latents,
        )

        # 6. Prepare extra step kwargs. TODO: Logic should ideally just be moved out of the pipeline
        extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)

        # 7. Prepare added time ids & embeddings
        add_text_embeds = pooled_prompt_embeds
        if self.text_encoder_2 is None:
            text_encoder_projection_dim = int(pooled_prompt_embeds.shape[-1])
        else:
            text_encoder_projection_dim = self.text_encoder_2.config.projection_dim

        add_time_ids = self._get_add_time_ids(
            original_size,
            crops_coords_top_left,
            target_size,
            dtype=prompt_embeds.dtype,
            text_encoder_projection_dim=text_encoder_projection_dim,
        )
        if negative_original_size is not None and negative_target_size is not None:
            negative_add_time_ids = self._get_add_time_ids(
                negative_original_size,
                negative_crops_coords_top_left,
                negative_target_size,
                dtype=prompt_embeds.dtype,
                text_encoder_projection_dim=text_encoder_projection_dim,
            )
        else:
            negative_add_time_ids = add_time_ids

        if self.do_classifier_free_guidance:
            prompt_embeds = torch.cat([negative_prompt_embeds, prompt_embeds], dim=0)
            add_text_embeds = torch.cat(
                [negative_pooled_prompt_embeds, add_text_embeds], dim=0
            )
            add_time_ids = torch.cat([negative_add_time_ids, add_time_ids], dim=0)

        prompt_embeds = prompt_embeds.to(device)
        add_text_embeds = add_text_embeds.to(device)
        add_time_ids = add_time_ids.to(device).repeat(
            batch_size * num_images_per_prompt, 1
        )

        if ip_adapter_image is not None or ip_adapter_image_embeds is not None:
            image_embeds = self.prepare_ip_adapter_image_embeds(
                ip_adapter_image,
                ip_adapter_image_embeds,
                device,
                batch_size * num_images_per_prompt,
                self.do_classifier_free_guidance,
            )

        # Preprocess reference image
        reference_image = self.image_processor.preprocess(reference_image)
        reference_latents = self.prepare_image_latents(
            reference_image,
            timesteps[:1].repeat(batch_size * num_images_per_prompt),  # no use
            batch_size,
            1,
            prompt_embeds.dtype,
            device,
            generator,
            add_noise=False,
        )
        reference_latents_need = reference_latents
        with torch.no_grad():
            ref_timesteps = torch.zeros_like(timesteps[0])
            ref_hidden_states = {}

            self.unet(
                reference_latents,
                ref_timesteps,
                encoder_hidden_states=prompt_embeds[-1:],
                added_cond_kwargs={
                    "text_embeds": add_text_embeds[-1:],
                    "time_ids": add_time_ids[-1:],
                },
                cross_attention_kwargs={
                    "cache_hidden_states": ref_hidden_states,
                    "use_mv": False,
                    "use_ref": False,
                },
                return_dict=False,
            )
            ref_hidden_states = {
                k: v.repeat_interleave(num_images_per_prompt, dim=0)
                for k, v in ref_hidden_states.items()
            }
        if self.do_classifier_free_guidance:
            ref_hidden_states = {
                k: torch.cat([torch.zeros_like(v), v], dim=0)
                for k, v in ref_hidden_states.items()
            }

        cross_attention_kwargs = {
            "mv_scale": mv_scale,
            "ref_hidden_states": {k: v.clone() for k, v in ref_hidden_states.items()},
            "ref_scale": reference_conditioning_scale,
            **(self.cross_attention_kwargs or {}),
        }

        # Preprocess control image
        control_image_feature = self.prepare_control_image(
            image=control_image,
            width=width,
            height=height,
            batch_size=batch_size * num_images_per_prompt,
            num_images_per_prompt=1,  # NOTE: always 1 for control images
            device=device,
            dtype=latents.dtype,
            do_classifier_free_guidance=self.do_classifier_free_guidance,
        )
        control_image_feature = control_image_feature.to(
            device=device, dtype=latents.dtype
        )

        adapter_state = self.cond_encoder(control_image_feature)
        for i, state in enumerate(adapter_state):
            adapter_state[i] = state * control_conditioning_scale

        # 8. Denoising loop
        target_mean_list = []
        target_std_list = []
        target_mean_list_1 = []
        target_std_list_1 = []
        target_mean_list_2 = []
        target_std_list_2 = []
        target_mean_list_3 = []
        target_std_list_3 = []
        m = 25
        num_warmup_steps = max(
            len(timesteps) - num_inference_steps * self.scheduler.order, 0
        )

        # 8.1 Apply denoising_end
        if (
            self.denoising_end is not None
            and isinstance(self.denoising_end, float)
            and self.denoising_end > 0
            and self.denoising_end < 1
        ):
            discrete_timestep_cutoff = int(
                round(
                    self.scheduler.config.num_train_timesteps
                    - (self.denoising_end * self.scheduler.config.num_train_timesteps)
                )
            )
            num_inference_steps = len(
                list(filter(lambda ts: ts >= discrete_timestep_cutoff, timesteps))
            )
            timesteps = timesteps[:num_inference_steps]

        # 9. Optionally get Guidance Scale Embedding
        timestep_cond = None
        if self.unet.config.time_cond_proj_dim is not None:
            guidance_scale_tensor = torch.tensor(self.guidance_scale - 1).repeat(
                batch_size * num_images_per_prompt
            )
            timestep_cond = self.get_guidance_scale_embedding(
                guidance_scale_tensor, embedding_dim=self.unet.config.time_cond_proj_dim
            ).to(device=device, dtype=latents.dtype)

        self._num_timesteps = len(timesteps)

        org_latents = latents
        with self.progress_bar(total=num_inference_steps) as progress_bar:
            for i, t in enumerate(timesteps):
                if i<m:
                    if self.interrupt:
                        continue
                    target_mean = latents.mean().item()
                    target_std = latents.std().item()
                    target_mean_list_1.append(target_mean)
                    target_std_list_1.append(target_std)
                    # expand the latents if we are doing classifier free guidance
                    latent_model_input = (
                        torch.cat([latents] * 2)
                        if self.do_classifier_free_guidance
                        else latents
                    )

                    latent_model_input = self.inf_scheduler.scale_model_input(
                        latent_model_input, t
                    )
                    target_mean = latent_model_input.mean().item()
                    target_std = latent_model_input.std().item()
                    target_mean_list.append(target_mean)
                    target_std_list.append(target_std)
                    added_cond_kwargs = {
                        "text_embeds": add_text_embeds,
                        "time_ids": add_time_ids,
                    }
                    if ip_adapter_image is not None or ip_adapter_image_embeds is not None:
                        added_cond_kwargs["image_embeds"] = image_embeds

                    if i < int(num_inference_steps * control_conditioning_factor):
                        down_intrablock_additional_residuals = [
                            state.clone() for state in adapter_state
                        ]
                    else:
                        down_intrablock_additional_residuals = None

                    # predict the noise residual
                    noise_pred = self.unet(
                        latent_model_input,
                        t,
                        encoder_hidden_states=prompt_embeds,
                        timestep_cond=timestep_cond,
                        cross_attention_kwargs=cross_attention_kwargs,
                        down_intrablock_additional_residuals=down_intrablock_additional_residuals,
                        added_cond_kwargs=added_cond_kwargs,
                        return_dict=False,
                    )[0]

                    # perform guidance
                    if self.do_classifier_free_guidance:
                        noise_pred_uncond, noise_pred_text = noise_pred.chunk(2)
                        target_mean = noise_pred_uncond.mean().item()
                        target_std = noise_pred_uncond.std().item()
                        target_mean_list_2.append(target_mean)
                        target_std_list_2.append(target_std)
                        target_mean = noise_pred_text.mean().item()
                        target_std = noise_pred_text.std().item()
                        target_mean_list_3.append(target_mean)
                        target_std_list_3.append(target_std)
                        noise_pred = noise_pred_uncond + 13.0 * (
                                noise_pred_text - noise_pred_uncond
                        )

                    if self.do_classifier_free_guidance and self.guidance_rescale > 0.0:
                        # Based on 3.4. in https://arxiv.org/pdf/2305.08891.pdf
                        noise_pred = rescale_noise_cfg(
                            noise_pred,
                            noise_pred_text,
                            guidance_rescale=self.guidance_rescale,
                        )

                    # compute the previous noisy sample x_t -> x_t-1
                    latents_dtype = latents.dtype
                    latents = self.inf_scheduler.step(
                        noise_pred, t, latents, **extra_step_kwargs, return_dict=False
                    )[0]
                    if latents.dtype != latents_dtype:
                        if torch.backends.mps.is_available():
                            # some platforms (eg. apple mps) misbehave due to a pytorch bug: https://github.com/pytorch/pytorch/pull/99272
                            latents = latents.to(latents_dtype)

                    if callback_on_step_end is not None:
                        callback_kwargs = {}
                        for k in callback_on_step_end_tensor_inputs:
                            callback_kwargs[k] = locals()[k]
                        callback_outputs = callback_on_step_end(self, i, t, callback_kwargs)

                        latents = callback_outputs.pop("latents", latents)
                        prompt_embeds = callback_outputs.pop("prompt_embeds", prompt_embeds)
                        negative_prompt_embeds = callback_outputs.pop(
                            "negative_prompt_embeds", negative_prompt_embeds
                        )
                        add_text_embeds = callback_outputs.pop(
                            "add_text_embeds", add_text_embeds
                        )
                        negative_pooled_prompt_embeds = callback_outputs.pop(
                            "negative_pooled_prompt_embeds", negative_pooled_prompt_embeds
                        )
                        add_time_ids = callback_outputs.pop("add_time_ids", add_time_ids)
                        negative_add_time_ids = callback_outputs.pop(
                            "negative_add_time_ids", negative_add_time_ids
                        )

                    # call the callback, if provided
                    if i == len(timesteps) - 1 or (
                            (i + 1) > num_warmup_steps and (i + 1) % self.scheduler.order == 0
                    ):
                        progress_bar.update()
                        if callback is not None and i % callback_steps == 0:
                            step_idx = i // getattr(self.scheduler, "order", 1)
                            callback(step_idx, t, latents)

        with self.progress_bar(total=num_inference_steps) as progress_bar:
            for i, t in enumerate(timesteps):
                if i < m:
                    if self.interrupt:
                        continue

                    # expand the latents if we are doing classifier free guidance
                    latent_model_input = (
                        torch.cat([latents] * 2)
                        if self.do_classifier_free_guidance
                        else latents
                    )

                    latent_model_input = self.inv_scheduler.scale_model_input(
                        latent_model_input, t
                    )
                    old_mean = latent_model_input.mean().item()
                    old_std = latent_model_input.std().item()
                    latent_model_input = (latent_model_input - old_mean) * (target_std_list[m-1 - i] / old_std) + \
                                         target_mean_list[m-1 - i]
                    added_cond_kwargs = {
                        "text_embeds": add_text_embeds,
                        "time_ids": add_time_ids,
                    }
                    if ip_adapter_image is not None or ip_adapter_image_embeds is not None:
                        added_cond_kwargs["image_embeds"] = image_embeds

                    if i < int(num_inference_steps * control_conditioning_factor):
                        down_intrablock_additional_residuals = [
                            state.clone() for state in adapter_state
                        ]
                    else:
                        down_intrablock_additional_residuals = None

                    # predict the noise residual
                    noise_pred = self.unet(
                        latent_model_input,
                        timesteps[m-1 - i],
                        encoder_hidden_states=prompt_embeds,
                        timestep_cond=timestep_cond,
                        cross_attention_kwargs=cross_attention_kwargs,
                        down_intrablock_additional_residuals=down_intrablock_additional_residuals,
                        added_cond_kwargs=added_cond_kwargs,
                        return_dict=False,
                    )[0]

                    # perform guidance
                    if self.do_classifier_free_guidance:
                        noise_pred_uncond, noise_pred_text = noise_pred.chunk(2)
                        old_mean = noise_pred_uncond.mean().item()
                        old_std = noise_pred_uncond.std().item()
                        noise_pred_uncond = (noise_pred_uncond - old_mean) * (target_std_list_2[m-1 - i] / old_std) + \
                                            target_mean_list_2[m-1 - i]
                        old_mean = noise_pred_text.mean().item()
                        old_std = noise_pred_text.std().item()
                        noise_pred_text = (noise_pred_text - old_mean) * (target_std_list_3[m-1 - i] / old_std) + \
                                          target_mean_list_3[m-1 - i]
                        noise_pred = noise_pred_uncond + 0.0 * (
                                noise_pred_text - noise_pred_uncond
                        )

                    if self.do_classifier_free_guidance and self.guidance_rescale > 0.0:
                        # Based on 3.4. in https://arxiv.org/pdf/2305.08891.pdf
                        noise_pred = rescale_noise_cfg(
                            noise_pred,
                            noise_pred_text,
                            guidance_rescale=self.guidance_rescale,
                        )

                    # compute the previous noisy sample x_t -> x_t-1
                    latents_dtype = latents.dtype
                    latents = self.inv_scheduler.step(
                        noise_pred, t, latents, **extra_step_kwargs, return_dict=False
                    )[0]
                    old_mean = latents.mean().item()
                    old_std = latents.std().item()
                    latents = (latents - old_mean) * (target_std_list_1[m-1 - i] / old_std) + target_mean_list_1[m-1 - i]
                    if latents.dtype != latents_dtype:
                        if torch.backends.mps.is_available():
                            # some platforms (eg. apple mps) misbehave due to a pytorch bug: https://github.com/pytorch/pytorch/pull/99272
                            latents = latents.to(latents_dtype)

                    if callback_on_step_end is not None:
                        callback_kwargs = {}
                        for k in callback_on_step_end_tensor_inputs:
                            callback_kwargs[k] = locals()[k]
                        callback_outputs = callback_on_step_end(self, i, t, callback_kwargs)

                        latents = callback_outputs.pop("latents", latents)
                        prompt_embeds = callback_outputs.pop("prompt_embeds", prompt_embeds)
                        negative_prompt_embeds = callback_outputs.pop(
                            "negative_prompt_embeds", negative_prompt_embeds
                        )
                        add_text_embeds = callback_outputs.pop(
                            "add_text_embeds", add_text_embeds
                        )
                        negative_pooled_prompt_embeds = callback_outputs.pop(
                            "negative_pooled_prompt_embeds", negative_pooled_prompt_embeds
                        )
                        add_time_ids = callback_outputs.pop("add_time_ids", add_time_ids)
                        negative_add_time_ids = callback_outputs.pop(
                            "negative_add_time_ids", negative_add_time_ids
                        )

                    # call the callback, if provided
                    if i == len(timesteps) - 1 or (
                            (i + 1) > num_warmup_steps and (i + 1) % self.scheduler.order == 0
                    ):
                        progress_bar.update()
                        if callback is not None and i % callback_steps == 0:
                            step_idx = i // getattr(self.scheduler, "order", 1)
                            callback(step_idx, t, latents)
        gt_latents = latents

        # Offload all models
        self.maybe_free_model_hooks()



        return reference_latents_need,org_latents,gt_latents

    ### NEW: adapters ###
    def _init_custom_adapter(
        self,
        # Multi-view adapter
        num_views: int,
        self_attn_processor: Any = DecoupledMVRowSelfAttnProcessor2_0,
        # Condition encoder
        cond_in_channels: int = 6,
        # For training
        copy_attn_weights: bool = True,
        zero_init_module_keys: List[str] = [],
    ):
        # Condition encoder
        self.cond_encoder = T2IAdapter(
            in_channels=cond_in_channels,
            channels=(320, 640, 1280, 1280),
            num_res_blocks=2,
            downscale_factor=16,
            adapter_type="full_adapter_xl",
        )

        # set custom attn processor for multi-view attention and image cross-attention
        self.unet: UNet2DConditionModel
        set_unet_2d_condition_attn_processor(
            self.unet,
            set_self_attn_proc_func=lambda name, hs, cad, ap: self_attn_processor(
                query_dim=hs,
                inner_dim=hs,
                num_views=num_views,
                name=name,
                use_mv=True,
                use_ref=True,
            ),
            set_cross_attn_proc_func=lambda name, hs, cad, ap: self_attn_processor(
                query_dim=hs,
                inner_dim=hs,
                num_views=num_views,
                name=name,
                use_mv=False,
                use_ref=False,
            ),
        )

        # copy decoupled attention weights from original unet
        if copy_attn_weights:
            state_dict = self.unet.state_dict()
            for key in state_dict.keys():
                if "_mv" in key:
                    compatible_key = key.replace("_mv", "").replace("processor.", "")
                elif "_ref" in key:
                    compatible_key = key.replace("_ref", "").replace("processor.", "")
                else:
                    compatible_key = key

                is_zero_init_key = any([k in key for k in zero_init_module_keys])
                if is_zero_init_key:
                    state_dict[key] = torch.zeros_like(state_dict[compatible_key])
                else:
                    state_dict[key] = state_dict[compatible_key].clone()
            self.unet.load_state_dict(state_dict)

    def _load_custom_adapter(self, state_dict):
        self.unet.load_state_dict(state_dict, strict=False)
        self.cond_encoder.load_state_dict(state_dict, strict=False)

    def _save_custom_adapter(
        self,
        include_keys: Optional[List[str]] = None,
        exclude_keys: Optional[List[str]] = None,
    ):
        def include_fn(k):
            is_included = False

            if include_keys is not None:
                is_included = is_included or any([key in k for key in include_keys])
            if exclude_keys is not None:
                is_included = is_included and not any(
                    [key in k for key in exclude_keys]
                )

            return is_included

        state_dict = {k: v for k, v in self.unet.state_dict().items() if include_fn(k)}
        state_dict.update(self.cond_encoder.state_dict())

        return state_dict
